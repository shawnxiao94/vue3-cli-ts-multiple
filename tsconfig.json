{
  "compilerOptions": {
    // target用于指定编译之后的版本目录
    "target": "es5",
    "module": "esnext",
    // strict用于指定是否启动所有类型检查，如果设为true这回同时开启下面这几个严格检查，默认为false
    "strict": true,
    // declaration用来指定是否在编译的时候生成相的d.ts声明文件，如果设为true,编译每个ts文件之后会生成一个js文件和一个声明文件，但是declaration和allowJs不能同时设为true
    "declaration": true,
    // 指定jsx代码用于的开发环境:'preserve','react-native',or 'react
    "jsx": "preserve",
    "importHelpers": true,
    // moduleResolution用于选择模块解析策略，有"node"和"classic"两种类型
    "moduleResolution": "node",
    "experimentalDecorators": true,
    "skipLibCheck": false,
    // esModuleInterop通过导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性
    "esModuleInterop": true,
    // allowSyntheticDefaultImports用来指定允许从没有默认导出的模块中默认导入
    "allowSyntheticDefaultImports": true,
    "sourceMap": false,
    // baseUrl用于设置解析非相对模块名称的基本目录，相对模块不会受到baseUrl的影响
    "baseUrl": ".",
    // rootDir用来指定编译文件的根目录，编译器会在根目录查找入口文件
    "rootDir": ".",
    // types用于指定需要包含的模块，只有在这里列出的模块的声明文件才会被加载
    "types": [
      "webpack-env",
      // "chai",
      // "mocha"
    ],
    // paths用于设置模块名到基于baseUrl的路径映射
    "paths": {
      "@/*": [
        "src/*"
      ],
      "@/views/*": [
        "src/views/*"
      ],
      "@/components/*": [
        "src/components/*"
      ],
      "@/assets/*": [
        "src/assets/*"
      ],
      "@/utils/*": [
        "src/utils/*"
      ],
      "@/api/*": [
        "src/api/*"
      ]
    },
    // lib用于指定要包含在编译中的库文件
    "lib": [
      "esnext",
      "dom",
      "dom.iterable",
      "scripthost"
    ]
  },
  "exclude": [
    "node_modules",
    "dist"
  ]
}